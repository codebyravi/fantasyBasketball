{"version":3,"sources":["components/Loading.js","components/Navbar.js","components/DynamicImport.js","components/App.js","serviceWorker.js","index.js"],"names":["Loading","state","text","_this","props","_this2","this","stopper","interval","setInterval","setState","_ref","window","clearInterval","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Component","defaultProps","Navbar","react_default","react_router_dom","to","DynamicImport","component","load","then","module","default","children","Home","components_DynamicImport","Promise","all","__webpack_require__","e","bind","Players","Teams","TeamPage","Articles","App","components_Navbar","react_router","exact","path","render","role","aria-label","label","Boolean","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5482c638.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Loading extends Component {\n\tstate = {\n\t\ttext: this.props.text\n\t};\n\n\tstatic propTypes = {\n\t\ttext: PropTypes.string.isRequired\n\t};\n\n\tstatic defaultProps = {\n\t\ttext: \"Loading\"\n\t};\n\n\tcomponentDidMount() {\n\t\tconst stopper = this.props.text + \"...\";\n\t\tthis.interval = setInterval(() => {\n\t\t\tthis.state.text === stopper\n\t\t\t\t? this.setState(() => ({ text: this.props.text }))\n\t\t\t\t: this.setState(({ text }) => ({ text: text + \".\" }));\n\t\t}, 300);\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.clearInterval(this.interval);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<p className=\"text-center\">{this.state.text}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Loading;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Navbar() {\n\treturn (\n\t\t<div className=\"container navbar\">\n\t\t\t<Link to=\"/\"> Home</Link>\n\t\t\t<nav className=\"nav-links\">\n\t\t\t\t<Link to=\"/players\"> Players</Link>\n\t\t\t\t<Link to=\"/teams\"> Teams</Link>\n\t\t\t</nav>\n\t\t</div>\n\t);\n}\n\nexport default Navbar;\n","import { Component } from \"react\";\n\nclass DynamicImport extends Component {\n\tstate = { component: null };\n\n\tcomponentDidMount() {\n\t\tthis.props.load().then(module =>\n\t\t\tthis.setState(() => ({\n\t\t\t\tcomponent: module.default\n\t\t\t}))\n\t\t);\n\t}\n\n\trender() {\n\t\treturn this.props.children(this.state.component);\n\t}\n}\n\nexport default DynamicImport;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Loading from \"./Loading\";\nimport DynamicImport from \"./DynamicImport\";\n\nconst Home = props => (\n\t<DynamicImport load={() => import(\"./Home\")}>\n\t\t{Component =>\n\t\t\tComponent === null ? <Loading /> : <Component {...props} />\n\t\t}\n\t</DynamicImport>\n);\n\nconst Players = props => (\n\t<DynamicImport load={() => import(\"./Players\")}>\n\t\t{Component =>\n\t\t\tComponent === null ? <Loading /> : <Component {...props} />\n\t\t}\n\t</DynamicImport>\n);\n\nconst Teams = props => (\n\t<DynamicImport load={() => import(\"./Teams\")}>\n\t\t{Component =>\n\t\t\tComponent === null ? <Loading /> : <Component {...props} />\n\t\t}\n\t</DynamicImport>\n);\n\nconst TeamPage = props => (\n\t<DynamicImport load={() => import(\"./TeamPage\")}>\n\t\t{Component =>\n\t\t\tComponent === null ? <Loading /> : <Component {...props} />\n\t\t}\n\t</DynamicImport>\n);\n\nconst Articles = props => (\n\t<DynamicImport load={() => import(\"./Articles\")}>\n\t\t{Component =>\n\t\t\tComponent === null ? <Loading /> : <Component {...props} />\n\t\t}\n\t</DynamicImport>\n);\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t<Route path=\"/players\" component={Players} />\n\t\t\t\t\t<Route path=\"/teams\" component={Teams} />\n\t\t\t\t\t<Route exact path=\"/:teamId\" component={TeamPage} />\n\t\t\t\t\t<Route path=\"/:teamId/articles\" component={Articles} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\trender={() => (\n\t\t\t\t\t\t\t<h1 className=\"text-center\">\n\t\t\t\t\t\t\t\t<span role=\"img\" aria-label=\"poop\" label=\"poop\">\n\t\t\t\t\t\t\t\t\tðŸ’©\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\tFour oh Four oops\n\t\t\t\t\t\t\t\t<span role=\"img\" aria-label=\"poop\" label=\"poop\">\n\t\t\t\t\t\t\t\t\tðŸ’©\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}